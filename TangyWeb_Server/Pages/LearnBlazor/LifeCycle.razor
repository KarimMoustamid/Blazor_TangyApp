@page "/learnBlazor/LifeCycle"

<h3>LifeCycle</h3>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary mb-4" @onclick="IncrementCount">Click me</button>
@Count <button class="btn btn-primary" type="reset" @onclick="StartCountDown">Start CountDown</button>

<div class="border p-4 m-2">
    <_LifeCycleChild CountValue="@currentCount"></_LifeCycleChild>
</div>

@foreach (var item in EventType)
{
    <hr/>
    @item
}

@code {

    private int currentCount;
    List<string> EventType = new();
    public int Count { get; set; } = 5;

    private void IncrementCount()
    {
        currentCount++;
    }


    void StartCountDown()
    {
        var timer = new Timer(TimerCallback, null, 1000, 1000);
    }

    /*
     StateHasChanged is a method in Blazor applications
     that is used to notify the component that its state has changed.
     When this method is invoked, the component will re-render itself.
     */
    void TimerCallback(object state)
    {
        if (Count > 0)
        {
            Count--;
            InvokeAsync(StateHasChanged); // Notify the component that the state has been changed
        }
    }

    #region Lifecycle

    /*
     This method is executed once when the component is first created.
     It's the best place to perform any initialization logic
     like setting default values for the component's parameters.
     */
    protected override void OnInitialized()
    {
        // initialization logic
        EventType.Add("OnInitialized is called");
    }

    protected override async Task OnInitializedAsync()
    {
        // async initialization logic
        EventType.Add("OnInitializedAsync is called");
        await Task.Delay(1000);
    }


    /*
     These methods are run every time a parameter is set.
     This can occur multiple times in a component's lifespan,
     such as whenever a parent component is rendering.
     */
    protected override void OnParametersSet()
    {
        // parameter setting logic
        EventType.Add("OnParametersSet is called");
    }

    protected override async Task OnParametersSetAsync()
    {
        // async parameter setting logic
        EventType.Add("OnParametersSetAsync is called");
    }

    /*
       These methods are called after the component has finished rendering.
       It is the final method in the lifecycle.
     */
    protected override void OnAfterRender(bool firstRender)
    {
        // post-rendering logic
        if (firstRender)
        {
            currentCount = 111;
        }
        else
        {
            currentCount = 999;
        }

        EventType.Add("OnAfterRender is called");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // async post-rendering logic
        EventType.Add("OnAfterRenderAsync is called");
    }

    /*
     This method gives you control over the rendering of the component.
     By default it returns 'true'
     meaning a re-render will occur whenever state has changed and 'false'
     whenever you want to prevent or avoid re-rendering.
     */
    protected override bool ShouldRender()
    {
        return false;
    }

    /*
     Implement IDisposable to dispose off any resources or cleanup when the component is being removed from the UI.
     */
    public void Dispose()
    {
        // cleanup logic
    }

    #endregion

}